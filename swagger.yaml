openapi: 3.0.0
info:
  title: Jobs API
  contact: {}
  version: '1.0'
servers:
- url: https://jobs-api-0602.herokuapp.com/api/v1
  variables: {}
paths:
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The user ID
    delete:
      tags:
      - Jobs
      summary: Delete Job
      operationId: DeleteJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  
    patch:
      tags:
      - Jobs
      summary: Update Jobs
      operationId: UpdateJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  
    get:
      tags:
      - Jobs
      summary: Get Single Job
      operationId: GetSingleJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /jobs:
    get:
      tags:
      - Jobs
      summary: Get All Jobs
      operationId: GetAllJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    post:
      tags:
      - Jobs
      summary: Create Jobs
      operationId: CreateJobs
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateJobsRequest'
              - example:
                  company: Google
                  position: back-end developer
            example:
              company: Google
              position: back-end developer
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /auth/login:
    post:
      tags:
      - Auth
      summary: login user
      operationId: loginuser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/loginuserrequest'
              - example:
                  name: Rapha
                  email: Rapha5@gmail.com
                  password: secret
            example:
              name: Rapha
              email: Rapha5@gmail.com
              password: secret
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/register:
    post:
      tags:
      - Auth
      summary: register user
      operationId: registeruser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/registeruserrequest'
              - example:
                  name: Evan
                  email: Evan@gmail.com
                  password: secret
            example:
              name: Evan
              email: Evan@gmail.com
              password: secret
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
components:
  schemas:
    loginuserrequest:
      title: loginuserrequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: Rapha
        email: Rapha5@gmail.com
        password: secret
    registeruserrequest:
      title: registeruserrequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: Evan
        email: Evan@gmail.com
        password: secret
    CreateJobsRequest:
      title: CreateJobsRequest
      required:
      - company
      - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: Google
        position: back-end developer
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: Jobs
  description: ''
- name: Auth
  description: ''